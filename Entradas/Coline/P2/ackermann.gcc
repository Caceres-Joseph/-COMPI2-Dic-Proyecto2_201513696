
	//-- Inicializando punteros --
P = 0;
H = 1;
S = 1;

principal();
void principal(){
		//-- Imprimiendo --
	printf(%c, 10);
		//-- Llamado a funcion --
	t0 = P + 1;	//pivote
	t1 = t0 + 1;
	Stack[t1] = 3;	//param:entero
	t2 = P + 1;	//pivote
	t3 = t2 + 2;
	Stack[t3] = 4;	//param:entero
	P = P + 1;
	main_ackermann_entero0_entero0();
	t4 = Stack[P];	//retorno
	P = P - 1;
	printf(%d, t4);
L0:
}

main_ackermann_entero0_entero0();
		//-- si --
	t5 = P + 1;
	t6 = Stack[t5];
	if(t6 == 0) goto L2;
	goto L3;
		L3:
		//-- sino si --
	t7 = P + 1;
	t8 = Stack[t7];
	if(t8 > 0) goto L5;
	goto L6;
	L5:
	t9 = P + 2;
	t10 = Stack[t9];
	if(t10 == 0) goto L8;
	goto L6;
		L6:
		//-- sino --
			//-- Retorno --
			//-- Llamado a funcion --
		t11 = P + 1;
		t12 = Stack[t11];
		t13 = t12-1;
			//-- Llamado a funcion --
		t14 = P + 1;
		t15 = Stack[t14];
		t16 = P + 2;
		t17 = Stack[t16];
		t18 = t17-1;
		t19 = P + 3;	//pivote
		t20 = t19 + 1;
		Stack[t20] = t15;	//param:entero
		t21 = P + 3;	//pivote
		t22 = t21 + 2;
		Stack[t22] = t18;	//param:entero
		P = P + 3;
		main_ackermann_entero0_entero0();
		t23 = Stack[P];	//retorno
		P = P - 3;
		t24 = P + 3;	//pivote
		t25 = t24 + 1;
		Stack[t25] = t13;	//param:entero
		t26 = P + 3;	//pivote
		t27 = t26 + 2;
		Stack[t27] = t23;	//param:entero
		P = P + 3;
		main_ackermann_entero0_entero0();
		t28 = Stack[P];	//retorno
		P = P - 3;
		Stack[P] = t28;
		goto L1;
		goto L7;
		L8:
			//-- Retorno --
			//-- Llamado a funcion --
		t29 = P + 1;
		t30 = Stack[t29];
		t31 = t30-1;
		t32 = P + 3;	//pivote
		t33 = t32 + 1;
		Stack[t33] = t31;	//param:entero
		t34 = P + 3;	//pivote
		t35 = t34 + 2;
		Stack[t35] = 1;	//param:entero
		P = P + 3;
		main_ackermann_entero0_entero0();
		t36 = Stack[P];	//retorno
		P = P - 3;
		Stack[P] = t36;
		goto L1;
		L7:
		goto L4;
		L2:
			//-- Retorno --
		t37 = P + 2;
		t38 = Stack[t37];
		t39 = t38 + 1;
		Stack[P] = t39;
		goto L1;
		L4:
L1:
}
