

clase Node{
    entero key;
    entero height;
    Node left;
    Node right;

    Node(entero d){
        key=d;
        height=1;
    }
}

clase AVLTree{
    Node root;

    AVLTree(){
        entero val1;
    }

    // A utility function to get the height of the tree 
    entero height(Node N){
        si(N==nada){
            retornar 0;
        }
        retornar N.height;
    }


    // A utility function to get maximum of two integers 
    entero max(entero a, entero b){
       si(a>b){
            retornar a;
       }sino{
            retornar b;
       }
       
    }
    // A utility function to right rotate subtree rooted with y 
    // See the diagram given above. 

    Node rightRotate(Node y){
        Node x=y.left;
        Node T2=x.right;

        // Perform rotation 
        x.right=y;
        y.left=T2;

  
        // Update heights 

        y.height = max(height(y.left), height(y.right)) + 1; 
        x.height = max(height(x.left), height(x.right)) + 1; 
  
        // Return new root 
        retornar x; 
    }

    // A utility function to left rotate subtree rooted with x 
    // See the diagram given above. 


    Node leftRotate(Node x) { 
        Node y = x.right; 
        Node T2 = y.left; 
  
        // Perform rotation 
        y.left = x; 
        x.right = T2; 
  
        //  Update heights 
        x.height = max(height(x.left), height(x.right)) + 1; 
        y.height = max(height(y.left), height(y.right)) + 1; 
  
        // Return new root 
        retornar y; 
    } 

    // Get Balance factor of node N 
    entero getBalance(Node N) { 
        si (N == nada){
            retornar 0;
        } 
        
  
        retornar height(N.left) - height(N.right); 
    } 

     Node insert(Node node, entero key) { 
  
        /* 1.  Perform the normal BST insertion */
        si (node == nada) {
            retornar nuevo Node(key); 
        }

        si (key < node.key) {
            node.left = insert(node.left, key); 
        }sino si (key > node.key){
            node.right = insert(node.right, key); 
        }sino {
            retornar node;
        } 
        
  
        /* 2. Update height of this ancestor node */
        node.height = 1 + max(height(node.left), 
                              height(node.right)); 
  
        /* 3. Get the balance factor of this ancestor 
              node to check whether this node became 
              unbalanced */
        entero balance = getBalance(node); 
  
        // si this node becomes unbalanced, then there 
        // are 4 cases Left Left Case 
        si (balance > 1 && key < node.left.key){

            retornar rightRotate(node); 
        } 
  
        // Right Right Case 
        si (balance < -1 && key > node.right.key) {
            retornar leftRotate(node); 
        } 
  
        // Left Right Case 
        si (balance > 1 && key > node.left.key) { 
            node.left = leftRotate(node.left); 
            retornar rightRotate(node); 
        } 
  
        // Right Left Case 
        si (balance < -1 && key < node.right.key) { 
            node.right = rightRotate(node.right); 
            retornar leftRotate(node); 
        } 
  
        /* return the (unchanged) node pointer */
        retornar node; 
    } 


    vacio preOrder(Node node){
        si (node != nada) { 
            imprimir(node.Key); 
            preOrder(node.left); 
            preOrder(node.right); 
        }  
    }


}


clase main{
    
    principal(){

        AVLTree tree = nuevo AVLTree(); 
  
        /* Constructing tree given in the above figure */
        tree.root = tree.insert(tree.root, 10); 
        tree.root = tree.insert(tree.root, 20); 
        tree.root = tree.insert(tree.root, 30); 
        tree.root = tree.insert(tree.root, 40); 
        tree.root = tree.insert(tree.root, 50); 
        tree.root = tree.insert(tree.root, 25);

        /* The constructed AVL Tree would be 
             30 
            /  \ 
          20   40 
         /  \     \ 
        10  25    50 
        */

        imprimir("Preorder traversal of the constructed AVL tree is \n"); 
        tree.preOrder(tree.root);
        imprimir();
    }

}