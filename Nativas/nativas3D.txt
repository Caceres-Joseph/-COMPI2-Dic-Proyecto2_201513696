
clase main{
  
    principal(){ 
         entero r1=potencia(2.0,3);
         entero r2=potencia(3.0,4);
         entero r3=potencia(20.0,0);


        imprimir(r1);//8
        imprimir(r2);//81
        imprimir(r3);//1
         
         
    } 
 
   vacio inicializarArreglo(entero inicio, entero tam){

        entero i=0;
        mientras(i<tam){

            imprimir(i);

            i++;
        }
    }

    entero func_potencia(decimal base, entero exponente){
        entero restultado=1;

        si(exponente==0){ 
            retornar restultado;
        }


        para(entero i=0 ; i < exponente ; i++){
            restultado=restultado*base;
            
        }

        retornar restultado;
    }
 

    entero multipli(entero num1, entero num2){ 
        retornar num1*num;
    }


   vacio func_cargarCadena(entero arr1[10],caracter ptrCadena[10]){

       entero i=0;
       mientras(ptrCadena[i] != 0){
            arr1[i]=ptrCadena[i];
            i++;
       }
 
    }

    
    void concatenar2(caracter destino[200], caracter  valor){


        entero i=0;
        mientras(destino[i] != '\0' ){
            i++;
        }

        

        entero j=0;
        mientras(valor  != '\0'){
             caracter  temp=valor;
            destino[i+j]=temp;
            j++;
        } 
    }

    void concatenar(caracter destino[200], caracter valor[200]){


        entero i=0;
        mientras(destino[i] != '\0' ){
            i++;
        }

        entero p=0;
        mientras(valor[p] != '\0' ){
            p++;
        }

        entero j=0;
        mientras(j < p && valor[j] != '\0' ){
            destino[i+j]=valor[j];
            j++; 
        }

        destino[i+j]=nulo;
    }
  
    void println(caracter cad[200]){

        entero i=0;
        mientras(cad[i] != '\0' ){
            imprimir(cad[i]);
            i++;
        }

    }

 


    entero func_concatenarHash(entero arr1, entero arr2){ 
        entero s;
        s=0;

        entero i=0;

        mientras(arr1[i]!=0){
            
            si(arr1[i]==35){
                entero j=0;
                mientras(arr2[j]!=0){
                    imprimir(99);
                    j++;
                }
                i=i+2; //para saltar el #D
            }sino{
                imprimir(33);
            }
            
            i++;
        }

        retornar s;

    }

  
    entero convertirAEntero(caracter valor){
        retornar valor + 0;
    }

    entero convertirAEntero1(caracter cad[5]){
        entero ret=0;

        entero i=0;
        booleano esEntero=falso;
        mientras(cad[i] != '\0' ){ 

            entero t1=cad[i]-48;
            si(i==0){
                si(t1 >= 0 && t1 <= 9){
                    esEntero=verdadero;      
                    ret = t1;              
                }sino{ 
                    ret=cad[i];
                }
            }sino{
                si(esEntero){
                    ret=ret*10+t1;
                }sino{
                    ret+=cad[i];
                } 
            } 
            i++;
        }

        retornar ret;
    }


    entero convertirAEntero(decimal value){
         
            decimal fract=value%1;
            decimal ent=value-fract;
 
            retornar ent;
    }

    entero convertirAEntero(booleano valor){
        retornar valor;
    }

}